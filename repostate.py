#=========================================================MARK OK 
#   R E P O S T A T E . P Y  || repostate.py Last Update 28/10/68
#==========================================PROGRAM BY Creative-HD
import requests
import time
import json
import random 
import os 
import sys 
from typing import Dict, Any, Optional

# =================================================================
# 1. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà (CONFIGS)
# =================================================================

MONITORING_SERVER_PORT = 5000
IP_STORAGE_FILE = "server_ip.json" 

# *** ‚ö†Ô∏è IP ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤ Server ‡∏£‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà (‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô) ***
# üö® FIX: ‡πÉ‡∏ä‡πâ 127.0.0.1 ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤ Default ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ö‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ
# ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡∏à‡∏£‡∏¥‡∏á ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á IP ‡∏à‡∏£‡∏¥‡∏á‡∏ú‡πà‡∏≤‡∏ô Command Line
DEFAULT_MONITORING_SERVER_IP = "127.0.0.1" 

# üö® FIX: Endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Discovery ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô /Miner_Server/discovery
DISCOVERY_ENDPOINT_FORMAT = f"http://{{host}}:{MONITORING_SERVER_PORT}/Miner_Server/discovery" 

# ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
REPORT_INTERVAL_SEC = 30 
MAX_RETRIES = 5
RETRY_DELAY = 10 
DISCOVERY_RETRY_THRESHOLD = 3 

# =================================================================
# 2. GLOBAL STATE
# =================================================================
CURRENT_MONITORING_SERVER_IP: str = ""
REPORT_URL: str = ""
REPORT_FAILURE_COUNT: int = 0 

# =================================================================
# 3. HELPER FUNCTIONS
# =================================================================

def load_server_ip() -> str:
    """‡πÇ‡∏´‡∏•‡∏î IP Server ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô"""
    global CURRENT_MONITORING_SERVER_IP
    
    # 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å Command Line Argument
    if len(sys.argv) > 1:
        # ‡∏´‡∏≤‡∏Å‡∏°‡∏µ Argument ‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà 1 ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô IP Server ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        cmd_ip = sys.argv[1]
        print(f" [INFO] Using Server IP from Command Line: {cmd_ip}")
        CURRENT_MONITORING_SERVER_IP = cmd_ip
        return cmd_ip
    
    # 2. ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå
    try:
        with open(IP_STORAGE_FILE, 'r') as f:
            data = json.load(f)
            saved_ip = data.get("server_ip")
            if saved_ip:
                CURRENT_MONITORING_SERVER_IP = saved_ip
                return saved_ip
    except (FileNotFoundError, json.JSONDecodeError):
        pass # ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        
    # 3. ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏Å‡∏≥‡∏´‡∏ô‡∏î)
    if not CURRENT_MONITORING_SERVER_IP:
        CURRENT_MONITORING_SERVER_IP = DEFAULT_MONITORING_SERVER_IP
        
    return CURRENT_MONITORING_SERVER_IP

def save_server_ip(ip: str):
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å IP Server ‡∏•‡∏á‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå"""
    data = {"server_ip": ip}
    try:
        with open(IP_STORAGE_FILE, 'w') as f:
            json.dump(data, f)
        print(f" [INFO] Server IP saved to {IP_STORAGE_FILE}: {ip}")
    except Exception as e:
        print(f" [ERROR] Failed to save IP to file: {e}")

def load_worker_config(key: str, default_value: Any) -> Any:
    """‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î Config ‡∏Ç‡∏≠‡∏á Worker (‡πÄ‡∏ä‡πà‡∏ô Name, Pass, Zone)"""
    # ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå Config ‡∏Ç‡∏≠‡∏á Worker
    # ‡πÅ‡∏ï‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ ‡πÄ‡∏£‡∏≤‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ Default
    return default_value 
    
def get_mock_stats(worker_name: str) -> Dict[str, Any]:
    """‡∏™‡∏£‡πâ‡∏≤‡∏á Mock Data ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô"""
    return {
        # üö® FIX BUG: local_hashrate_sols_raw ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ö‡∏±‡πä‡∏Å‡∏Ñ‡∏π‡∏ì 10 ‡πÄ‡∏Å‡∏¥‡∏ô‡∏°‡∏≤
        "hashrate_sols_raw": random.uniform(10_000_000, 15_000_000), 
        "shares_sent": random.randint(10, 50),
        # Worker Name, Tags, Pass ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô send_report
    }

# =================================================================
# 4. REPORTING & DISCOVERY LOGIC
# =================================================================

def discover_server_ip(initial_ip: str) -> Optional[str]:
    """‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ Discovery Server IP Address"""
    global REPORT_URL
    print(f" [INFO] Attempting to discover server at {initial_ip}:{MONITORING_SERVER_PORT}")
    
    current_attempt = 0
    # üí° ‡πÉ‡∏ä‡πâ 1 IP ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÅ‡∏ï‡πà‡πÉ‡∏´‡πâ Retry 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡∏≤‡∏° DISCOVERY_RETRY_THRESHOLD
    while current_attempt < DISCOVERY_RETRY_THRESHOLD:
        try:
            url = DISCOVERY_ENDPOINT_FORMAT.format(host=initial_ip)
            response = requests.get(url, timeout=5) 
            response.raise_for_status() 

            discovery_data = response.json()
            new_host_address = discovery_data.get("HostAddress")
            new_report_url = discovery_data.get("ReportUrl")

            if new_host_address and new_report_url:
                print(f" [SUCCESS] Server discovered at IP: {new_host_address}")
                
                # 1. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Global State
                REPORT_URL = new_report_url
                
                # 2. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å IP ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
                save_server_ip(new_host_address)
                
                # 3. ‡∏™‡πà‡∏á IP ‡πÉ‡∏´‡∏°‡πà‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
                return new_host_address
            else:
                print(" [ERROR] Discovery response incomplete.")

        except requests.exceptions.RequestException as e:
            current_attempt += 1
            print(f" [ERROR] Discovery failed at {initial_ip}. Attempt {current_attempt}/{DISCOVERY_RETRY_THRESHOLD}: {e}")
            time.sleep(1) # ‡∏£‡∏≠ 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
            
    return None

def update_server_ip_if_needed():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö IP ‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ Discovery ‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô"""
    global CURRENT_MONITORING_SERVER_IP, REPORT_URL
    
    initial_ip = load_server_ip()

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ IP ‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ ‡πÅ‡∏•‡∏∞‡∏°‡∏µ Report URL ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡∏Å‡∏≤‡∏£ Discovery)
    if initial_ip and REPORT_URL:
        # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏¢ (‡∏Å‡∏£‡∏ì‡∏µ‡∏£‡∏±‡∏ô‡∏ã‡πâ‡∏≥)
        print(f" [INFO] Using saved server IP: {initial_ip}")
        CURRENT_MONITORING_SERVER_IP = initial_ip
        return True

    # ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ Discovery Server IP
    discovered_ip = discover_server_ip(initial_ip)
    
    if discovered_ip:
        CURRENT_MONITORING_SERVER_IP = discovered_ip
        return True
    else:
        print(" [FATAL] Server Discovery failed completely. Cannot continue.")
        sys.exit(1)


def send_report(worker_name: str, worker_tags: str, worker_pass: str) -> bool:
    """‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÑ‡∏õ‡∏¢‡∏±‡∏á Server"""
    global REPORT_FAILURE_COUNT, REPORT_URL
    
    if not REPORT_URL:
        print(" [CRITICAL] REPORT_URL is missing. Attempting re-discovery...")
        update_server_ip_if_needed()
        if not REPORT_URL: return False

    stats_data = get_mock_stats(worker_name)
    
    # üìå ‡∏™‡∏£‡πâ‡∏≤‡∏á Payload ‡∏ï‡∏≤‡∏° API Contract
    payload = {
        "worker_name": worker_name,
        "hashrate_sols_raw": stats_data["local_hashrate_sols_raw"],
        "shares_sent": stats_data["local_shares_sent"],
        "tags": worker_tags,
        "worker_pass": worker_pass,
    }

    # üí° Retry Logic
    for attempt in range(MAX_RETRIES):
        try:
            response = requests.post(REPORT_URL, json=payload, timeout=15)
            response.raise_for_status() # Raise exception for bad status codes (4xx or 5xx)

            print(f" [REPORT] Worker {worker_name} reported successfully to {REPORT_URL}. Hashrate: {payload['local_hashrate_sols_raw']:.0f} Sols/s")
            REPORT_FAILURE_COUNT = 0
            return True

        except requests.exceptions.RequestException as e:
            print(f" [ERROR] Failed to report stats to {REPORT_URL}. Attempt {attempt+1}/{MAX_RETRIES}: {e}")

        if attempt < MAX_RETRIES - 1:
            time.sleep(RETRY_DELAY)

    # 3. ‡∏ñ‡πâ‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    REPORT_FAILURE_COUNT += 1 
    print(f" [CRITICAL] Failed to report stats after {MAX_RETRIES} attempts. Failure count: {REPORT_FAILURE_COUNT}")
    
    # üí° ‡∏ñ‡πâ‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î ‡πÉ‡∏´‡πâ‡∏•‡∏ö IP ‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö Discovery ‡πÉ‡∏´‡∏°‡πà
    if REPORT_FAILURE_COUNT >= DISCOVERY_RETRY_THRESHOLD:
        print(" [CRITICAL] Failure threshold reached. Deleting saved IP to force full discovery.")
        # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå IP ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å Command Line) ‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        if os.path.exists(IP_STORAGE_FILE):
             os.remove(IP_STORAGE_FILE)
             
    return False


# =================================================================
# 5. MAIN EXECUTION BLOCK 
# =================================================================
if __name__ == '__main__':
    
    WORKER_NAME = load_worker_config('Rname', "Unknown-Worker")
    # üö® FIX: ‡πÅ‡∏¢‡∏Å‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ Tags (Zone) ‡πÅ‡∏•‡∏∞ Pass
    WORKER_TAGS = load_worker_config('Zone', "AP") # ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤ Tags/Zone ‡πÉ‡∏ä‡πâ Key 'Zone'
    WORKER_PASS = load_worker_config('Pass', "x")  # Pass ‡πÉ‡∏ä‡πâ Key 'Pass'

    if WORKER_NAME == "Unknown-Worker":
        print(" [FATAL] Worker Name not set. Exiting.")
        sys.exit(1)
        
    update_server_ip_if_needed()
    
    print(f" [START] Starting reporting loop for worker {WORKER_NAME} every {REPORT_INTERVAL_SEC} seconds...")
    while True:
        
        report_success = send_report(WORKER_NAME, WORKER_TAGS, WORKER_PASS)
        
        # üí° ‡∏ñ‡πâ‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ Report (report_success == False) ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á Discovery ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        if not report_success:
            update_server_ip_if_needed()
            
        time.sleep(REPORT_INTERVAL_SEC)
