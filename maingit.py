import os, json, time
import sys
import requests
import base64
import re
import pyfiglet
import colorama
from github import Github, Auth
from progress.spinner import MoonSpinner
from colorama import init, Fore, Style
init(autoreset=True)
# banner
setting_banner = """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¶‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë    ‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà ‚ñà    ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà ‚ïë  V 3.2 ‚ïë
‚ïë   ‚ñà‚ñà  ‚ñà ‚ñà      ‚ñà   ‚ñà ‚ñà   ‚ñà‚ñà        ‚ïëCREATIVE‚ïë
‚ïë  ‚ñà‚ñà ‚ñà‚ñà‚ñà ‚ñà    GITHUB SUPPORT  ‚ñà‚ñà‚ñà   ‚ïë   HD   ‚ïë
‚ïë ‚ñà‚ñà    ‚ñà ‚ñà      ‚ñà   ‚ñà ‚ñà ‚ñà‚ñà          ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë‚ñà‚ñà    A‚ñàC‚ñà‚ñà‚ñà‚ñà  T‚ñà  I‚ñàV‚ñà‚ñà‚ñà    E‚ñà‚ñà‚ñà‚ñà‚ñà ‚ïëSETTING.‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï©‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"""

running_banner = """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¶‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë    ‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà ‚ñà    ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà ‚ïë  V 3.2 ‚ïë
‚ïë   ‚ñà‚ñà  ‚ñà ‚ñà      ‚ñà     ‚ñà   ‚ñà‚ñà        ‚ïëCREATIVE‚ïë
‚ïë  ‚ñà‚ñà ‚ñà‚ñà‚ñà ‚ñà    GITHUB SUPPORT  ‚ñà‚ñà‚ñà   ‚ïë   HD   ‚ïë
‚ïë ‚ñà‚ñà    ‚ñà ‚ñà      ‚ñà   ‚ñà ‚ñà ‚ñà‚ñà          ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë‚ñà‚ñàA    ‚ñà C‚ñà‚ñà‚ñà   T   I V‚ñà‚ñà    E‚ñà‚ñà‚ñà‚ñà‚ñà ‚ïë START  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï©‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"""

# banner function
def banner(logo):
    os.system("clear")
    print(logo,"     \nDevelop by AMS - CREATIVE-HD")
    print("------------------------------------------------") 
    print("                   ACTIVE MODE\n"
        + "    ‚ñù  ‚ñò         GitHub Support\n"
        + " ‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà     TERMUX AUTO START \n "
        + "‚ñà ‚ñà 3.2 ‚ñà ‚ñà CCMINER AFTER BOOT DEVICE\n"
        + "   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà       RUNNING AUTOMATIC\n"
        + "    ‚ñà‚ñà ‚ñà‚ñà                             AUG.2025")
    print("------------------------------------------------\n")


# install miner function 
def install():
    # os.system("git clone --single-branch -b ARM https://github.com/monkins1010/ccminer")
    os.system("git clone https://github.com/creativeHHD/ccminer_mmv")

# run miner function
def run():
    banner(running_banner)
    
    # 1. ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Rig Settings ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞ Fallback (‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)
    with open("set-miner/miner.json", encoding="utf-8") as set_file:
        loads = json.load(set_file)
        namepro = loads['namepro']
        droom = loads['droom']
        rig_name = loads['Rname']
 
        # *** ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏°‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏≤‡∏Å JSON ‡πÅ‡∏ó‡∏ô Environment Variable ***
        access_token = loads.get('GITHUB_ACCESS_TOKEN') 
    # ... (‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö access_token) ...
    # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ô
    run_pool, run_wallet, run_password, run_cpu = None, None, None, None
    
    if not access_token:
        print(f"{Fore.YELLOW}Error: GITHUB_ACCESS_TOKEN not found in miner.json. Set the token.")
        time.sleep(3)
        set_miner() # ‡∏´‡∏£‡∏∑‡∏≠‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏≥‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÉ‡∏™‡πà Token
        return    

    try:
        # **A. ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å GitHub**
        print(f"{Fore.CYAN}--- üåê Fetching config for rig '{rig_name}' from GitHub ---")
        g = Github(auth=Auth.Token(access_token))
        repo_name = f"creativeHHD/{namepro}"
        repo = g.get_repo(repo_name)
        file_path = f"{droom}.txt"
        
        file_content_obj = repo.get_contents(file_path)
        file_content = file_content_obj.decoded_content.decode('utf-8')
        lines = file_content.strip().split('\n')
        
        found_line = None
        for line in lines:
            if rig_name in line:
                found_line = line
                break
                
        if found_line:
            print(f"{Fore.GREEN}‚úÖ Config line found: {found_line}")
            
            # **B. ‡πÅ‡∏¢‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö (‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡πÉ‡∏ä‡πâ Pipe '|' ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏ö‡πà‡∏á)**
            try:
                values = [v.strip() for v in found_line.split('|')]
                # values[0] ‡∏Ñ‡∏∑‡∏≠ status, values[1] ‡∏Ñ‡∏∑‡∏≠ pool, values[2] ‡∏Ñ‡∏∑‡∏≠ wallet, etc.
                
                run_pool = values[1]
                run_wallet = values[2]
                run_password = values[4]
                run_cpu = values[5] if len(values) > 5 else 1 # ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô 1
                
                # C. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á‡πÉ‡∏ô miner.json (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô Fallback)
                loads['Pool'] = run_pool
                loads['Wallet'] = run_wallet
                loads['Pass'] = run_password
                loads['Cpu'] = run_cpu
                with open("set-miner/miner.json", "w") as set_file:
                    json.dump(loads, set_file, indent=4)
                print(f"{Fore.YELLOW}* Updated miner.json with latest GitHub config.")
                
            except IndexError:
                print(f"{Fore.YELLOW}{Style.BRIGHT}‚ö†Ô∏è Error: The row for '{rig_name}' does not have enough columns (expected 6+).")
                raise Exception("Invalid GitHub config format.") # ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡πâ‡∏≤ format ‡∏ú‡∏¥‡∏î
        else:
            print(f"{Fore.YELLOW}{Style.BRIGHT}‚ö†Ô∏è Rig name '{rig_name}' not found in the GitHub file.")
            raise Exception("Rig configuration not found.")
            
    except Exception as e:
        print(f"\n{Fore.YELLOW}{Style.BRIGHT}‚ùå An error occurYELLOW while fetching from GitHub: {e}")
        # **D. ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ Fallback ‡∏à‡∏≤‡∏Å miner.json ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà**
        try:
            if 'Pool' in loads and loads['Pool']:
                print(f"{Fore.YELLOW}* Attempting to use existing config from miner.json...")
                run_pool = loads['Pool']
                run_wallet = loads['Wallet']
                run_password = loads.get('Pass', 'x')
                run_cpu = loads.get('Cpu', 1)
            else:
                raise Exception("No config available locally.")
        except Exception as fallback_error:
            print(f"{Fore.YELLOW}{Style.BRIGHT}‚ùå CRITICAL: Cannot run. GitHub failed and no local config available.")
            time.sleep(5)
            return

    # E. ‡∏£‡∏±‡∏ô Miner (‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ run_...)
    print("--- üöÄ STARTING CCMINER ---")
    print(f"Pool: {run_pool}, Wallet: {run_wallet}.{rig_name}, CPU: {run_cpu}")
    os.system(f"cd ccminer_mmv && ./ccminer -a verus -o {run_pool} -u {run_wallet}.{rig_name} -p {run_password} -t {run_cpu}")

def set_miner():
    banner(setting_banner) # ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
    while True:
        try:
            namepro = input("Enter project name [‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á : www.github.com/ID/?] : ")
            droom = input("Enter room in project [‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á : www.github.com/ID/xxx/?] : ")
            Rname = input("Enter Worker [‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á] : ")
            
            if not all([namepro, droom, Rname]):
                print(f"\n{Fore.YELLOW}‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô!")
                time.sleep(2)
                continue
            
            puts = {
                'namepro': namepro,
                'droom': droom,
                'Rname': Rname
            }
            with open("set-miner/miner.json", "w") as set_file:
                json.dump(puts, set_file, indent=4)
            break
        except Exception as e:
            print(f"\n{Fore.YELLOW}‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        os.system("clear")
        with MoonSpinner(text="                 ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠...", color="yellow") as bar:
            for _ in range(100):
                time.sleep(0.05)
                bar.next()
            time.sleep(2)

# ‡πÇ‡∏Ñ‡πâ‡∏î‡∏´‡∏•‡∏±‡∏Å
if __name__ == "__main__":
    while True:
        os.system("clear")
        with MoonSpinner(text="                 ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠...", color="yellow") as bar:
            for _ in range(100):
                time.sleep(0.05)
                bar.next()

        if not os.path.exists("ccminer_mmv"):
            # ‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡∏°‡∏µ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô install() ‡∏ó‡∏µ‡πà‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á ccminer
            print("ccminer_mmv not found. Running installation...")
            install()
            break
        
        if os.path.exists("set-miner"):
            if os.path.isfile("set-miner/miner.json"):
                run()
                break
            else:
                set_miner()
        else:
            os.system("mkdir set-miner")
            set_miner()    
    
